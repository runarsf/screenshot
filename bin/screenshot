#!/usr/bin/env bash
set -euo pipefail

if test -z "${DISPLAY}"; then
  printf "X server doesn't seem to be running....\n"
  exit 1
fi

# Variables {{{
CONFIG="${XDG_CONFIG_HOME:-${HOME}/.config}/.screenshotrc"

# Change these in $CONFIG (~/.config/.screenshotrc)
SCREENSHOT_DIRECTORY="${HOME}/Pictures/Screenshots"
COUNTDOWN="3"

set -o allexport
test -f "${CONFIG}" && source "${CONFIG}"
set +o allexport

set +o errexit
read -r -d '' CAPTURE_MODES <<'EOMODES'
  [PNG] Region
  [PNG] Screen
  [PNG] Window
  [GIF] Region
  [GIF] Screen
  [GIF] Window
  [MP4] Region
  [MP4] Screen
  [MP4] Window
EOMODES
set -o errexit
LINES=$(($(printf "${CAPTURE_MODES}" | wc -l) + 1))
# }}}

colours () { # {{{
  RESET=$'\e[0;39m'

  E_BOLD=$'\e[1m'
  E_DIM=$'\e[2m'
  E_UNDERLINE=$'\e[4m'
  E_BLINK=$'\e[5m'
  E_INVERT=$'\e[7m'
  E_HIDDEN=$'\e[8m'

  R_NORMAL=$'\e[0m'
  R_BOLD=$'\e[21m'
  R_DIM=$'\e[22m'
  R_UNDERLINE=$'\e[24m'
  R_BLINK=$'\e[25m'
  R_INVERT=$'\e[27m'
  R_HIDDEN=$'\e[28m'

  C_DEFAULT=$'\e[19m'
  C_BLACK=$'\e[30m'
  C_RED=$'\e[31m'
  C_GREEN=$'\e[32m'
  C_YELLOW=$'\e[33m'
  C_BLUE=$'\e[34m'
  C_MAGENTA=$'\e[35m'
  C_CYAN=$'\e[36m'
  C_LGRAY=$'\e[37m'
  C_DGRAY=$'\e[90m'
  C_LRED=$'\e[91m'
  C_LGREEN=$'\e[92m'
  C_LYELLOW=$'\e[93m'
  C_LBLUE=$'\e[94m'
  C_LMAGENTA=$'\e[95m'
  C_LCYAN=$'\e[96m'
  C_WHITE=$'\e[97m'

  B_DEFAULT=$'\e[49m'
  B_BLACK=$'\e[40m'
  B_RED=$'\e[41m'
  B_GREEN=$'\e[42m'
  B_YELLOW=$'\e[43m'
  B_BLUE=$'\e[44m'
  B_MAGENTA=$'\e[45m'
  B_CYAN=$'\e[46m'
  B_LGRAY=$'\e[47m'
  B_DGRAY=$'\e[100m'
  B_LRED=$'\e[101m'
  B_LGREEN=$'\e[102m'
  B_LYELLOW=$'\e[103m'
  B_LBLUE=$'\e[104m'
  B_LMAGENTA=$'\e[105m'
  B_LCYAN=$'\e[106m'
  B_WHITE=$'\e[106m'
}
colours
# }}}

usage () { # {{{
	cat <<-EOMAN
  ${RESET}${C_GREEN}Usage:${RESET} $(basename $(realpath ${0}))  <${C_RED}options${RESET}>  [${C_BLUE}command${RESET}]
	
	${C_GREEN}Options:${RESET}
	  -h, --help                 Display usage menu.
	  -c, --countdown <${C_RED}seconds${RESET}>  Adjust countdown time.
	
	${C_GREEN}Commands:${RESET}
	  stop                       Stop screen recording (GIF and MP4).
	
	${C_GREEN}Examples:${RESET}
	  $(basename $(realpath ${0})) -h${RESET}
	${RESET}
	EOMAN
} # }}}

countdown () { # <seconds:int:3> -> Void {{{
  _seconds="${1:-3}"

  while test "${_seconds}" -gt "0"; do
    notify-send "Screenshot" "Recording in ${_seconds} seconds" -t 1000
    sleep 1
    (( _seconds=${_seconds}-1 ))
  done

  return 0
} # }}}

check_deps () { # <dependencies:@string> -> Void {{{
  _deps=${@}
  _missing=""
  for _dep in ${_deps}; do
    if ! hash "${_dep}" 2>/dev/null; then
      _missing="${_missing} ${_dep}"
    fi
  done
  if test -n "${_missing}"; then
    printf "Missing required dependencies:${_missing}\n"
  fi
} # }}}

ffmpeg () { # Helper function -> `ffmpeg` {{{
    command ffmpeg -hide_banner -loglevel error -nostdin "${@}"
} # }}}

video_to_gif () { # <tmpfile_basename:path> -> Void {{{
  ffmpeg -i "${1}.mp4" -vf palettegen -f image2 -c:v png - |
  ffmpeg -i "${1}.mp4" -i - -filter_complex paletteuse "${1}.gif"
  rm "${1}.mp4"
  mv "${1}.gif" "${1}"
} #  }}}

# Argument parsing {{{
capture_mode="selection"
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    -h|--help) # {{{
      usage
      exit 0
      shift;; # }}}
    -m|--monitor) # {{{
      capture_mode="monitor"
      shift;; # }}}
    -w|--window) # {{{
      capture_mode="window"
      shift;; # }}}
    -s|--selection) # {{{
      capture_mode="selection"
      shift;shift;; # }}}
    -c|--countdown) # {{{
      COUNTDOWN="${2}"
      shift;shift;; # }}}
    --*) # {{{
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;; # }}}
  esac
done
set -- "${positional[@]}"

if test "${#}" -gt "0"; then
  if test "${1}" = "stop"; then
    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
    exit 0
  fi
fi
# }}}

check_deps rofi ffcast xclip slop sharenix
if test ! -d "${SCREENSHOT_DIRECTORY}"; then
  mkdir -p "$(realpath "${SCREENSHOT_DIRECTORY}")"
fi

main () {
  CHOICE="$( printf "${CAPTURE_MODES}" | rofi -lines "${LINES}" -dmenu -i -fuzzy -p "Screenshot" )"

  # Temporary file handling {{{
  # TODO: Consider using `mktemp --dry-run` so the file doesn't have to be deleted
  # create temporary file
  tmpfile="$(mktemp /tmp/screenshot-XXXXXX)"

  # create file descriptor 3 for writing to a temporary file so that
  # echo ... >&3 writes to that file
  exec 3>"${tmpfile}"

  # create file descriptor 4 for reading from the same file so that
  # the file seek positions for reading and writing can be different
  exec 4<"${tmpfile}"

  # delete temp file; the directory entry is deleted at once; the reference counter
  # of the inode is decremented only after the file descriptor has been closed.
  # The file content blocks are deallocated (this is the real deletion) when the
  # reference counter drops to zero.
  rm "${tmpfile}"

  # close the file descriptor
  trap "exec 3>-" RETURN
  # }}}

  NOW="$(date '+%d-%m-%Y-%H:%M:%S')"

  # FIXME: Why use slop when `ffcast -s` exists?
  #        The selection looks better I guess... auto select window?
  #        Does that mean window is unnecessary?
  # TODO: Consider using ffmpeg + slop for recording, see: slop readme
  # TODO: Cooldown for screenshot as well?
  # TODO: rofi menu for screen selection (active monitor and --argument) `ffcast -x list`
  # TODO: Figure out why countdown "dies"
  # TODO: Record all screens (voluntarily)
  # TODO: Record with sound
  # TODO: [stop] feedback (did it stop, did it fail, did it run)
  # TODO: Add configurable post-procedures (array of enabled procedures)
  # TODO: xdg-open the file?
  EXTENSION=""
  case "${CHOICE}" in
    '  [PNG] Region') EXTENSION=".png" # {{{
      notify-send "Screenshot" "Select a region to capture" -t 2500
      ffcast -q "$(slop -n -f '-g %g ')" png "${tmpfile}"
      ;; # }}}
    '  [PNG] Screen') EXTENSION=".png" # {{{
      # FIXME: Captures all screens
      ffcast -q png "${tmpfile}"
      ;; # }}}
    '  [PNG] Window') EXTENSION=".png" # {{{
      notify-send "Screenshot" "Select a window to capture" -t 2500
      ffcast -w -q png "${tmpfile}"
      ;; # }}}
    '  [GIF] Region') EXTENSION=".gif" # {{{
      notify-send "Screenshot" "Select a region to record" -t 2500
      set +o errexit
      ffcast -q "$(slop -n -f '-g %g ' && countdown)" rec "${tmpfile}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile}"
      ;; # }}}
    '  [GIF] Screen') EXTENSION=".gif" # {{{
      set +o errexit
      countdown
      ffcast -q rec "${tmpfile}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile}"
      ;; # }}}
    '  [GIF] Window') EXTENSION=".gif" # {{{
      notify-send "Screenshot" "Select a window to record" -t 2500
      set +o errexit
      ffcast -q -g "$(ffcast -q -w && countdown)" rec "${tmpfile}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile}"
      ;; # }}}
    '  [MP4] Region') EXTENSION=".mp4" # {{{
      notify-send "Screenshot" "Select a region to record" -t 2500
      set +o errexit
      ffcast -q "$(slop -n -f '-g %g ' && countdown)" rec "${tmpfile}.mp4"
      set -o errexit
      mv "${tmpfile}.mp4" "${tmpfile}"
      ;; # }}}
    '  [MP4] Screen') EXTENSION=".mp4" # {{{
      set +o errexit
      countdown
      ffcast -q rec "${tmpfile}.mp4"
      set -o errexit
      mv "${tmpfile}.mp4" "${tmpfile}"
      ;; # }}}
    '  [MP4] Window') EXTENSION=".mp4" # {{{
      notify-send "Screenshot" "Select a window to record" -t 2500
      set +o errexit
      ffcast -q -g "$(ffcast -q -w && countdown)" rec "${tmpfile}.mp4"
      set -o errexit
      mv "${tmpfile}.mp4" "${tmpfile}"
      ;; # }}}
    *) exit 1;;
  esac

  # Post-procedure: File
  cp "${tmpfile}" "$(realpath "${SCREENSHOT_DIRECTORY}/Screenshot-${NOW}${EXTENSION}")"
  notify-send "Screenshot" "${CHOICE} saved to ${SCREENSHOT_DIRECTORY}" -t 1500

  # Post-procedure: Clipboard
  # TODO: Consider making this a file object from the File procedure, or the tmpfile
  set +o errexit
  xclip -selection clipboard -t image/png "${tmpfile}" \
    && notify-send "Screenshot" "${CHOICE} copied to Clipboard" -t 1500
  set -o errexit

  # TODO: Post-procedure: Sharenix upload
  sharenix -n -c "$(realpath "${SCREENSHOT_DIRECTORY}/Screenshot-${NOW}${EXTENSION}")"


  # Finish
  rm "${tmpfile}"
}
main &

exit 0
