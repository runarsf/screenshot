#!/usr/bin/env bash
set -euo pipefail

: "${DISPLAY:?X server doesn\'t seem to be running...}"

# TODO Allow starting recordings from commandline.
# TODO -x|-y|-w|-h or -s|--size "POSXxPOSYxWIDTHxHEIGHT": specify region proportions and size
# TODO -r|--region: Grab region from selection so you can pass to -x-y-w-h
# BUG 'Screenshot' is written to terminal

# Variables {{{
CONFIG="${XDG_CONFIG_HOME:-${HOME:-~}/.config}/.screenshotrc"

# Change these in $CONFIG (~/.config/.screenshotrc)
SCREENSHOT_DIRECTORY="${HOME}/Pictures/Screenshots"
COUNTDOWN="5"

set -o allexport
test -f "${CONFIG}" && source "${CONFIG}"
set +o allexport

set +o errexit
read -r -d '' CAPTURE_MODES <<'EOMODES'
  [PNG] Region
  [PNG] Screen
  [PNG] Window
  [GIF] Region
  [GIF] Screen
  [GIF] Window
  [MP4] Region
  [MP4] Screen
  [MP4] Window
EOMODES
set -o errexit
LINES=$(($(printf "${CAPTURE_MODES}" | wc -l) + 1))
# }}}

colours () { # {{{
  RESET=$'\e[0;39m'

  E_BOLD=$'\e[1m'
  E_DIM=$'\e[2m'
  E_UNDERLINE=$'\e[4m'
  E_BLINK=$'\e[5m'
  E_INVERT=$'\e[7m'
  E_HIDDEN=$'\e[8m'

  R_NORMAL=$'\e[0m'
  R_BOLD=$'\e[21m'
  R_DIM=$'\e[22m'
  R_UNDERLINE=$'\e[24m'
  R_BLINK=$'\e[25m'
  R_INVERT=$'\e[27m'
  R_HIDDEN=$'\e[28m'

  C_DEFAULT=$'\e[19m'
  C_BLACK=$'\e[30m'
  C_RED=$'\e[31m'
  C_GREEN=$'\e[32m'
  C_YELLOW=$'\e[33m'
  C_BLUE=$'\e[34m'
  C_MAGENTA=$'\e[35m'
  C_CYAN=$'\e[36m'
  C_LGRAY=$'\e[37m'
  C_DGRAY=$'\e[90m'
  C_LRED=$'\e[91m'
  C_LGREEN=$'\e[92m'
  C_LYELLOW=$'\e[93m'
  C_LBLUE=$'\e[94m'
  C_LMAGENTA=$'\e[95m'
  C_LCYAN=$'\e[96m'
  C_WHITE=$'\e[97m'

  B_DEFAULT=$'\e[49m'
  B_BLACK=$'\e[40m'
  B_RED=$'\e[41m'
  B_GREEN=$'\e[42m'
  B_YELLOW=$'\e[43m'
  B_BLUE=$'\e[44m'
  B_MAGENTA=$'\e[45m'
  B_CYAN=$'\e[46m'
  B_LGRAY=$'\e[47m'
  B_DGRAY=$'\e[100m'
  B_LRED=$'\e[101m'
  B_LGREEN=$'\e[102m'
  B_LYELLOW=$'\e[103m'
  B_LBLUE=$'\e[104m'
  B_LMAGENTA=$'\e[105m'
  B_LCYAN=$'\e[106m'
  B_WHITE=$'\e[106m'
}
colours
# }}}

usage () { # {{{
	cat <<-EOMAN
	${RESET}${C_GREEN}Usage:${RESET} $(basename $(realpath ${0}))  <${C_RED}options${RESET} [${C_YELLOW}arguments${RESET}]>  [${C_BLUE}command${RESET}]
	
	${C_GREEN}Options:${RESET}
	  -h, --help             Display usage menu.
	  -m, --mode  <${C_RED}mode${RESET}>     Capture mode.
	              ${C_YELLOW}region${RESET}
	              ${C_YELLOW}screen${RESET}
	              ${C_YELLOW}window${RESET}
	  -o, --open  <${C_RED}program${RESET}>  Pass the filepath of the screenshot to <${C_YELLOW}program${RESET}>.
	  -c, --copy             Copy the file to the clipboard.
	  -p, --path             Copy the filepath to the clipboard.
	  -t, --temp             Save the screenshot to /tmp instead of ${SCREENSHOT_DIRECTORY}
	  -d, --dir   <${C_RED}dir${RESET}>      Path of screenshots (can also be set in ${CONFIG} as 'SCREENSHOT_DIRECTORY'.)
	
	${C_GREEN}Commands:${RESET}
	  ${C_BLUE}stop${RESET}                   Stop screen recording (GIF and MP4).
	
	${C_GREEN}Examples:${RESET}
	  $(basename $(realpath ${0})) ${C_DGRAY}# Show interactive menu${RESET}
	  $(basename $(realpath ${0})) ${C_RED}-m${RESET} ${C_YELLOW}region${RESET} ${C_DGRAY}# Capture a screenshot and save to ${SCREENSHOT_DIRECTORY}${RESET}
	  $(basename $(realpath ${0})) ${C_BLUE}stop${RESET} ${C_DGRAY}# Stop recording${RESET}
	  $(basename $(realpath ${0})) ${C_RED}-m${RESET} ${C_YELLOW}region${RESET} ${C_RED}-t${RESET} ${C_RED}-p${RESET} ${C_RED}-c${RESET} ${C_RED}-o${RESET} ${C_YELLOW}'screenshot-xbackbone'${RESET}
	  ${C_DGRAY}# - Select a region${RESET}
	  ${C_DGRAY}# - Capture it to a temporary file${RESET}
	  ${C_DGRAY}# - Copy the path to the clipboard${RESET}
	  ${C_DGRAY}# - Copy the file to the clipboard${RESET}
	  ${C_DGRAY}# - Upload it with sharenix -> sharenix copies the URL to the clipboard${RESET}
	  $(basename $(realpath ${0})) ${C_RED}-m${RESET} ${C_YELLOW}region${RESET} ${C_RED}-t${RESET} ${C_RED}-p${RESET} ${C_RED}-c${RESET} ${C_RED}-o${RESET} ${C_YELLOW}'sharenix -n -c'${RESET}
	${RESET}
	EOMAN
} # }}}

countdown () { # <seconds:int:3> -> Void {{{
  _seconds="${1:-3}"

  while test "${_seconds}" -gt "0"; do
    notify-send "Screenshot" "Recording in ${_seconds} seconds" -t 1000
    sleep 1
    (( _seconds=${_seconds}-1 ))
  done

  return 0
} # }}}

check_deps () { # <dependencies:@string> -> Void {{{
  _deps=${@}
  _missing=""
  for _dep in ${_deps}; do
    if ! hash "${_dep}" 2>/dev/null; then
      _missing="${_missing} ${_dep}"
    fi
  done
  if test -n "${_missing}"; then
    printf "Missing required dependencies:${_missing}\n"
    exit 1
  fi
} # }}}

ffmpeg () { # Helper function -> `ffmpeg` {{{
    command ffmpeg -hide_banner -loglevel error -nostdin "${@}"
} # }}}

video_to_gif () { # <tmpfile_basename:path> -> Void {{{
  ffmpeg -i "${1}.mp4" -vf palettegen -f image2 -c:v png - |
  ffmpeg -i "${1}.mp4" -i - -filter_complex paletteuse "${1}.gif"
  rm "${1}.mp4"
} #  }}}

# Argument parsing {{{
CAPTURE_FORMAT='  [PNG] '
CAPTURE_MODE=""; OPEN_COMMAND=""; COPY_PATH=""; COPY_FILE=""; SAVE_FILE="true"
positional=()
while test "${#}" -gt "0"; do
  case "${1}" in
    -h|--help) # {{{
      usage
      exit 0
      shift;; # }}}
    -m|--mode) # {{{
      CAPTURE_MODE="$(printf ${2} | tr '[:upper:]' '[:lower:]')"
      case "${CAPTURE_MODE}" in
        window|region|screen) CAPTURE_MODE="${CAPTURE_MODE^}";;
        *)
          printf "Invalid capture mode (see -h)\n";
          exit 1;;
      esac
      shift;shift;; # }}}
    -o|--open) # {{{
      OPEN_COMMAND="${2}"
      shift;shift;; # }}}
    -c|--copy) # {{{
      COPY_FILE="true"
      shift;; # }}}
    -p|--path) # {{{
      COPY_PATH="true"
      shift;; # }}}
    -t|--temp) # {{{
      SAVE_FILE=""
      shift;; # }}}
    -d|--dir) # {{{
      SCREENSHOT_DIRECTORY="${2}"
      shift;shift;; # }}}
    --*) # {{{
      printf "Unknown option: ${1}\n"
      exit 1
      shift;;
    -*)
      shopts="${1}"
      if test "${#shopts}" -le "2"; then
        printf "Unknown option: ${shopts}\n"
        exit 2
      fi
      shift
      set -- "${shopts:0:2}" "-${shopts:2}" "${@}"
      ;;
    *)
      positional+=("${1}")
      shift;; # }}}
  esac
done
set -- "${positional[@]}"

if test "${#}" -gt "0"; then
  if test "${1}" = "stop"; then
    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
    exit 0
  fi
fi
# }}}

check_deps rofi ffcast xclip slop sharenix
if test ! -d "${SCREENSHOT_DIRECTORY}"; then
  mkdir -p "$(realpath "${SCREENSHOT_DIRECTORY}")"
fi

main () {
  # If the capture mode isn't set by an argument (format for detection is [CAPTURE_MODE][CAPTURE_FORMAT]), then prompt user for it...
  if test -z "${CAPTURE_MODE}"; then
    CAPTURE_MODE="$( printf "${CAPTURE_MODES}" | rofi -lines "${LINES}" -dmenu -i -fuzzy -p "Screenshot" )"
    CAPTURE_FORMAT=""
  fi

  tmpfile_base="$(mktemp /tmp/screenshot-XXXXXX)"
  NOW="$(date '+%d-%m-%Y-%H:%M:%S')"

  EXTENSION=""
  tmpfile=""
  case "${CAPTURE_FORMAT}${CAPTURE_MODE}" in
    '  [PNG] Region') EXTENSION=".png" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a region to capture" -t 2500
      _geospec="$(slop -n -f '-g %g ')"
      ffcast -q "${_geospec}" png "${tmpfile}"
      ;; # }}}
    '  [PNG] Screen') EXTENSION=".png" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      ffcast -q png "${tmpfile}"
      ;; # }}}
    '  [PNG] Window') EXTENSION=".png" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a window to capture" -t 2500
      ffcast -w -q png "${tmpfile}"
      ;; # }}}
    '  [GIF] Region') EXTENSION=".gif" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a region to record" -t 2500
      _geospec="$(slop -n -f '-g %g ' && countdown ${COUNTDOWN})"
      set +o errexit
      ffcast -q "${_geospec}" rec "${tmpfile_base}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile_base}"
      ;; # }}}
    '  [GIF] Screen') EXTENSION=".gif" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      set +o errexit
      countdown
      ffcast -q rec "${tmpfile_base}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile_base}"
      ;; # }}}
    '  [GIF] Window') EXTENSION=".gif" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a window to record" -t 2500
      _geospec="$(ffcast -q -w && countdown ${COUNTDOWN})"
      set +o errexit
      ffcast -q -g "${_geospec}" rec "${tmpfile_base}.mp4"
      set -o errexit
      notify-send "Screenshot" "Converting to GIF...\n(this can take a while)" -t 2500
      video_to_gif "${tmpfile_base}"
      ;; # }}}
    '  [MP4] Region') EXTENSION=".mp4" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a region to record" -t 2500
      _geospec="$(slop -n -f '-g %g ' && countdown ${COUNTDOWN})"
      set +o errexit
      ffcast -q "${_geospec}" rec "${tmpfile}"
      set -o errexit
      ;; # }}}
    '  [MP4] Screen') EXTENSION=".mp4" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      set +o errexit
      countdown ${COUNTDOWN}
      ffcast -q rec "${tmpfile}"
      set -o errexit
      ;; # }}}
    '  [MP4] Window') EXTENSION=".mp4" # {{{
      tmpfile="${tmpfile_base}${EXTENSION}"
      notify-send "Screenshot" "Select a window to record" -t 2500
      _geospec="$(ffcast -q -w && countdown ${COUNTDOWN})"
      set +o errexit
      ffcast -q -g "${_geospec}" rec "${tmpfile}"
      set -o errexit
      ;; # }}}
    *) printf "Unknown capture mode '${CAPTURE_FORMAT}${CAPTURE_MODE}'...\n"; exit 1;;
  esac

  if test -n "${SAVE_FILE}"; then
    SAVED_FILE="$(realpath "${SCREENSHOT_DIRECTORY}/Screenshot-${NOW}${EXTENSION}")"
    cp "${tmpfile}" "${SAVED_FILE}"
    notify-send "Screenshot" "${CAPTURE_FORMAT}saved to ${SCREENSHOT_DIRECTORY}" -t 2500
    printf "${CAPTURE_FORMAT}saved to ${SCREENSHOT_DIRECTORY}\n"
  else
    notify-send "Screenshot" "${CAPTURE_FORMAT}saved to ${tmpfile}" -t 3000
    printf "Screenshot" "${CAPTURE_FORMAT}saved to ${tmpfile}\n"
  fi

  if test -n "${COPY_PATH}"; then
    set +o errexit
    printf "${SAVED_FILE:-${tmpfile}}" | xclip -selection clipboard \
      && notify-send "Screenshot" "${SAVED_FILE:-${tmpfile}} copied to clipboard" -t 1500
    set -o errexit
  fi
  if test -n "${COPY_FILE}"; then
    set +o errexit
    xclip -selection clipboard -t image/png "${tmpfile}" \
      && notify-send "Screenshot" "${CAPTURE_FORMAT} copied to clipboard" -t 1500
    set -o errexit
  fi

  if test -n "${OPEN_COMMAND}"; then
    eval "${OPEN_COMMAND} ${tmpfile}"
  fi

  rm "${tmpfile}"
}
main &

exit 0

