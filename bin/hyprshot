#!/usr/bin/env bash
set -o errexit
set -o nounset
set -o pipefail
set -o posix

# TODO # read -r X Y W H G ID < <(slop -f "%x %y %w %h %g %i")
# TODO only depend on wofi if interactive
# FIXME grim: command not found
#  xclip: /tmp/capture-2023-11-02-19:22:45
#  -pwVrKS.png: No such file or directory
# TODO replace notifications instead of adding new ones
# TODO allow default options
# TODO Cursor - could also be an example of passthrough
# TODO stop recording automatically
#    if test "${1}" = "stop"; then
#    pkill -fxn '(/\S+)*ffmpeg\s.*\sx11grab\s.*'
#    exit 0
#  fi
# TODO support Xorg
# TODO Exit on fail
# https://github.com/hyprwm/contrib/blob/main/grimblast/grimblast

# Config {{{
# Wring custom hooks can be done by defining a function in $CONFIG in the form
#  `hook__<name> () { ... }`, where <name> is the name of the hook, and the last
#  positional argument is the path of the screenshot.
#  You can then use it with the +<hook> option.
#  You can also open a program directly with the --open option.

declare -gr SCRIPTNAME="$(basename "${0}")"
declare -gr CONFIG="${HOME}/.config/.cumshotrc"

declare -ga HOOKS=()
declare -ga TRANSIENT=()

declare -g SCREENSHOT_DIR="${HOME}/Pictures/Screenshots"
declare -g SIMPLE="false"
declare -gi COUNTDOWN=0

printf -v date '%(%Y-%m-%d-%H:%M:%S)T' -1
declare -g FILENAME_PREFIX="capture-${date}"

declare -g COMMAND="capture"
declare -g TARGET="active"

set -o allexport
test -f "${CONFIG}" && . "${CONFIG}"
set +o allexport
# }}}

colors () { # {{{
  RESET=$'\e[0;39m'

  E_BOLD=$'\e[1m'
  E_DIM=$'\e[2m'
  E_UNDERLINE=$'\e[4m'
  E_BLINK=$'\e[5m'
  E_INVERT=$'\e[7m'
  E_HIDDEN=$'\e[8m'

  R_NORMAL=$'\e[0m'
  R_BOLD=$'\e[21m'
  R_DIM=$'\e[22m'
  R_UNDERLINE=$'\e[24m'
  R_BLINK=$'\e[25m'
  R_INVERT=$'\e[27m'
  R_HIDDEN=$'\e[28m'

  C_DEFAULT=$'\e[19m'
  C_BLACK=$'\e[30m'
  C_RED=$'\e[31m'
  C_GREEN=$'\e[32m'
  C_YELLOW=$'\e[33m'
  C_BLUE=$'\e[34m'
  C_MAGENTA=$'\e[35m'
  C_CYAN=$'\e[36m'
  C_LGRAY=$'\e[37m'
  C_DGRAY=$'\e[90m'
  C_LRED=$'\e[91m'
  C_LGREEN=$'\e[92m'
  C_LYELLOW=$'\e[93m'
  C_LBLUE=$'\e[94m'
  C_LMAGENTA=$'\e[95m'
  C_LCYAN=$'\e[96m'
  C_WHITE=$'\e[97m'

  B_DEFAULT=$'\e[49m'
  B_BLACK=$'\e[40m'
  B_RED=$'\e[41m'
  B_GREEN=$'\e[42m'
  B_YELLOW=$'\e[43m'
  B_BLUE=$'\e[44m'
  B_MAGENTA=$'\e[45m'
  B_CYAN=$'\e[46m'
  B_LGRAY=$'\e[47m'
  B_DGRAY=$'\e[100m'
  B_LRED=$'\e[101m'
  B_LGREEN=$'\e[102m'
  B_LYELLOW=$'\e[103m'
  B_LBLUE=$'\e[104m'
  B_LMAGENTA=$'\e[105m'
  B_LCYAN=$'\e[106m'
  B_WHITE=$'\e[106m'
}
# }}}

usage () { # {{{
  test "${SIMPLE}" = "false" && colors
  set +o nounset
	cat <<-EOMAN
	${RESET}${C_GREEN}Usage:${RESET} ${SCRIPTNAME}  <${C_RED}options${RESET} [${C_YELLOW}argumments${RESET}]>  <${C_BLUE}command${RESET}>  <${C_BLUE}target${RESET}>
	
	${C_GREEN}Options:${RESET}
	  -h, --help                Display usage menu.
	  -t, --temp                Save the screenshot to /tmp instead of ${SCREENSHOT_DIR}
	  -i, --interactive         Interactively select a command and target with wofi.
	  -w, --wait         <${C_YELLOW}sec${RESET}>  Wait for the specified number of seconds before capturing.
	  -d, --dir          <${C_YELLOW}dir${RESET}>  Path of screenshots directory.
	  -f, --filename     <${C_YELLOW}str${RESET}>  Filename-prefix of the screenshot. Use repeating X's to generate a random string.
	  -o, --open         <${C_YELLOW}cmd${RESET}>  Open the screenshot with the specified program.
	  -p, --path                Copy the file path to the clipboard.
	  -c, --copy                Copy the file to the clipboard.
	  -s, --save                Save the screenshot to ${SCREENSHOT_DIR} instead of /tmp
	  -e, --explore             Reveal the screenshot in the file manager.
	  -x, --xdg                 Open the screenshot with the default image viewer.
	  --debug                   Shows execution trace.
	  --simple                  Disables colors in output.
	  +${C_RED}...${RESET}                      A custom hook. Can be defined in ~/$(realpath --relative-to="${HOME}" "${CONFIG}") as 'hook__${C_RED}...${RESET}() {}'
	  --                        Stop parsing options, and pass the rest to the ${C_BLUE}command${RESET}.
	
	${C_GREEN}Commands:${RESET}
	  ${C_BLUE}capture${RESET}               Capture a screenshot.
	  ${C_BLUE}record${RESET}                Capture a video.
	  ${C_BLUE}gif${RESET}                   Capture a gif.
	
	${C_GREEN}Targets:${RESET}
	  ${C_BLUE}region${RESET}                Select a region to capture from.
	  ${C_BLUE}screen${RESET}                Capture the entire screen.
	  ${C_BLUE}active${RESET}                Capture the active window.
	${RESET}
	EOMAN
  set -o nounset
} # }}}

check_dependencies () { # dependencies:string[] -> void {{{
  declare -ra dependencies=("${@}")
  declare -a missing=()

  for dependency in "${dependencies[@]}"; do
    if ! hash "${dependency}" 2>/dev/null; then
      missing+="${dependency}"
    fi
  done

  if test "${#missing[@]}" -gt "0"; then
    printf 'Missing dependencies: %s\n' "${missing[@]}"
    exit 1
  fi
} # }}}

# FIXME if this is cacelled, it still continues
interactive_prompt() { # -> params {{{
  declare capture_mode
  set +o errexit
	read -r -d '' capture_modes <<-'EOMODES'
	  [PNG] Region
	  [PNG] Screen
	  [PNG] Window
	  [GIF] Region
	  [GIF] Screen
	  [GIF] Window
	  [MP4] Region
	  [MP4] Screen
	  [MP4] Window
	EOMODES
  set -o errexit
  declare -r capture_mode_lines="$(( $(printf '%s' "${capture_modes}" | wc -l) + 1 ))"
  declare -r capture_mode="$(printf '%s\n' "${capture_modes}" | wofi --lines "${capture_mode_lines}" --insensitive --dmenu --matching='fuzzy' --prompt='Select action')"

  case "${capture_mode}" in
    *GIF*) printf 'gif';;
    *MP4*) printf 'record';;
    *PNG*) printf 'capture';;
  esac
  declare -r target="$(printf '%s\n' "${capture_mode}" | awk '{printf $3}')"
  printf ' %s\n' "${target,,}"
} # }}}

parse_args () { # -> {{{
  if test "${#}" -eq "0"; then
    usage
    exit 0
  fi
  while test "${#}" -gt "0"; do
    case "${1}" in
      capture|gif|record) # {{{
        COMMAND="${1}"
        shift;;
      # }}}
      region|screen|active) # {{{
        TARGET="${1}"
        shift;;
      # }}}
      -h|--help) # {{{
        usage
        exit 0;;
      # }}}
      -s|--save) # {{{
        HOOKS+=("save")
        shift;;
      # }}}
      -t|--temp) # {{{
        HOOKS=( "${HOOKS[@]/save}" )
        shift;;
      # }}}
      -p|--path) # {{{
        HOOKS+=("path")
        shift;;
      # }}}
      -c|--copy) # {{{
        HOOKS+=("copy")
        shift;;
      # }}}
      -o|--open) # {{{
        case "${2:?Error: --open requires a command}" in
          -*|--*) printf 'Error: --open requires a command\n'; exit 1;;
        esac
        HOOKS+=("open ${2}")
        shift;shift;;
      # }}}
      -f|--filename) # {{{
        case "${2:?Error: --filename requires a template string}" in
          -*|--*) printf 'Error: --filename requires a template string\n'; exit 1;;
        esac
        FILENAME_PREFIX="${2}"
        shift;shift;;
      # }}}
      -e|--explore) # {{{
        HOOKS+=("explore")
        shift;;
      # }}}
      -x|--xdg) # {{{
        HOOKS+=("xdg")
        shift;;
      # }}}
      -i|--interactive) # {{{
        opts="$(interactive_prompt)"
        shift
        set -- ${opts} "${@}";;
      # }}}
      -w|--wait) # {{{
        COUNTDOWN="${2:?Error: --wait requires a number}"
        shift;shift;;
      # }}}
      -d|--dir) # {{{
        SCREENSHOT_DIR="${2:?Error: --dir requires a path}"
        shift;shift;;
      # }}}
      --debug) # {{{
        set -o xtrace
        shift;;
      # }}}
      --simple) # {{{
        SIMPLE="true"
        shift;;
      # }}}
      +*) # {{{
        HOOKS+=("${1:1}")
        shift;;
      # }}}
      --) # {{{
        shift
        TRANSIENT=("${@}")
        break;;
      # }}}
      --*) # {{{
        printf 'Unknown option: %s\n' "${1}"
        exit 1;;
      # }}}
      -*) # {{{
        opt="${1}"
        if test "${#opt}" -le "2"; then
          printf 'Unknown option: %s\n' "${opt}"
          exit 1
        fi
        shift
        set -- "${opt:0:2}" "-${opt:2}" "${@}";;
      # }}}
      *) # {{{
        printf 'Unknown command: %s\n' "${1}"
        exit 1;;
      # }}}
    esac
  done
} # }}}

countdown () { # <seconds:int:3> -> Void {{{
  declare seconds="${1:-3}"

  while test "${seconds}" -gt "0"; do
    notify-send -t 950 "${SCRIPTNAME}" "Capturing in ${seconds}..."
    printf '\r\033[KCapturing in %.d...' "${seconds}"
    sleep 1
    seconds="$((${seconds} - 1))"
  done
  printf '\n'
} # }}}

generate_temp () { # <filename> -> <filepath> {{{
  declare -r filename="${1%.*}-XXXXXX.${1##*.}"
  # FIXME Should fail when mktemp fails
  declare -r tmpfile="$(mktemp -q "/tmp/${filename}")"

  rm -f "${tmpfile}"

  printf '%s' "${tmpfile}"
} # }}}

# Selectors {{{
# Selectors are defined as functions in the form `select__<name> () { ... }`.
# Their job is to return a geometry specification in the form "X,Y WxH".

select__active () { # {{{
  hyprctl -j activewindow | jq -r '"\(.at[0]),\(.at[1]) \(.size[0])x\(.size[1])"'
} # }}}

select__region () { # {{{
  # FIXME if you cancel, it still continues
  slurp
} # }}}

select__screen () { # {{{
  hyprctl -j monitors | jq -r '.[] | select(.focused) | "\(.x),\(.y) \(.width)x\(.height)"'
} # }}}
# }}}

# Commands {{{
# Commands are defined as functions in the form `cmd__<name> () { ... }`.
# Their function is to capture the screenshot, and return the path of the capture.

cmd__capture () { # <geospec> <**transient> -> <filename> {{{
  declare -r filename="$(generate_temp "${FILENAME_PREFIX}.png")"
  printf '%s' "${filename}"
  grim -g "${1}" ${2:-} -t png "${filename}"
} # }}}

cmd__record () { # <geospec> <**transient> -> <filename> {{{
  declare -r filename="$(generate_temp "${FILENAME_PREFIX}.mp4")"
  printf '%s' "${filename}"
  wf-recorder --geometry "${1}" ${2:-} -f "${filename}" & >/dev/null 2>&1
} # }}}

cmd__gif () { # <geospec> <**transient> -> <filename> {{{
  declare -r filename="$(generate_temp capture.gif)"
  declare -r video="$(cmd__record "${1}")"
  printf '%s' "${filename}"

  ffmpeg -i "${video}" -vf palettegen -f image2 -c:v png - \
   | ffmpeg -i "${video}" -i - -filter_complex paletteuse "${filename}"

  rm -f "${video}"
} # }}}
# }}}

# Hooks {{{
# Hooks are defined as functions in $CONFIG in the form `hook__<name> () { ... }`.
# They are executed after the screenshot is taken, and are passed the path of the screenshot.
# They should only output the (updated) path of the screenshot, and nothing else.
# Only the first line will be captured as the updated path.

hook__path () { # <filepath> {{{
  printf '%s\n' "${1}"
  printf '%s' "${1}" | wl-copy
} # }}}

hook__copy () { # <filepath> {{{
  printf '%s\n' "${1}"
  xclip -selection clipboard -t image/png -i "${1}"
} # }}}

hook__save () { # <filepath> {{{
  printf '%s\n' "${1}"
  mkdir -p "${SCREENSHOT_DIR}"
  cp "${1}" "${SCREENSHOT_DIR}"
} # }}}

hook__open () { # <command> <filepath> {{{
  printf '%s\n' "${1}"
  ${1} "${2}" > /dev/null
} # }}}

hook__explore () { # <filepath> {{{
  printf '%s\n' "${1}"
  dbus-send \
    --session \
    --print-reply \
    --dest=org.freedesktop.FileManager1 \
    --type=method_call \
    /org/freedesktop/FileManager1 \
    org.freedesktop.FileManager1.ShowItems \
    array:string:"file://$(realpath "${1}")" \
    string:"" \
  || xdg-open "$(dirname "${1}")"
} # }}}

hook__xdg () { # <filepath> {{{
  printf '%s\n' "${1}"
  xdg-open "${1}"
} # }}}
# }}}

main () { # -> int {{{
  declare -ra dependencies=("notify-send" "wf-recorder" "slurp" "ffmpeg" "grim" "hyprctl" "wofi")
  check_dependencies "${dependencies[@]}"

  parse_args "${@}"

  declare -r geospec="$(select__${TARGET})"

  if declare -f -F "cmd__${COMMAND}" > /dev/null; then
    countdown "${COUNTDOWN}"
    declare filename="$(cmd__${COMMAND} "${geospec}" "${TRANSIENT[@]}")"
    notify-send -t 1500 "${SCRIPTNAME}" "Captured ${filename}!"
  else
    printf 'Undefined command %s\n' "${COMMAND}"
    return 1
  fi

  for hook in "${HOOKS[@]}"; do
    declare -a hook_arr=(${hook})
    if declare -f -F "hook__${hook_arr[0]}" > /dev/null; then
      declare -I filename="$(hook__${hook} "${filename:?Error: attempted to execute hook on a non-existent capture}" | head -1)"
      notify-send -t 1500 "${SCRIPTNAME}" "Running hook ${hook}"
    else
      printf 'Undefined hook %s\n' "${hook}"
    fi
  done
} # }}}

main "${@}"
exit "${?}"
